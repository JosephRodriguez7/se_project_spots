!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_active"},t=(e,t,o)=>{const r=e.querySelector(`#${t.id}-error`);t.classList.remove(o.inputErrorClass),r.classList.remove(o.errorClass)},o=(e,t,o)=>{(e=>e.some(e=>!e.validity.valid))(e)?(t.disabled=!0,t.classList.add(o.inactiveButtonClass)):(t.disabled=!1,t.classList.remove(o.inactiveButtonClass))},r=e=>{const r=document.querySelectorAll(e.formSelector);r.forEach(r=>{((e,r)=>{const n=Array.from(e.querySelectorAll(r.inputSelector)),a=e.querySelector(r.submitButtonSelector);console.log(n),console.log(a),o(n,a,r),n.forEach(l=>{l.addEventListener("input",function(){((e,o,r)=>{console.log(o.validationMessage),o.validity.valid?t(e,o,r):((e,t,o,r)=>{const n=t.id+"-error",a=e.querySelector(`#${t.id}-error`);a.textContent=o,console.log(n),a.classList.add(r.errorClass),t.classList.add(r.inputErrorClass)})(e,o,o.validationMessage,r)})(e,l,r),o(n,a,r)})})})(r,e)}),console.log(r)},n=(e,r)=>{const n=Array.from(e.querySelectorAll(r.inputSelector)),a=e.querySelector(r.submitButtonSelector);n.forEach(o=>{t(e,o,r)}),o(n,a,r)};r(e);const a=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}_handleServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{...this._headers}}).then(e=>this._handleServerResponse(e))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{...this._headers}}).then(e=>this._handleServerResponse(e))}updateUserInfo({name:e,about:t}){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{...this._headers},body:JSON.stringify({name:e,about:t})}).then(e=>this._handleServerResponse(e))}updateUserAvatar({avatar:e}){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{...this._headers},body:JSON.stringify({avatar:e})}).then(e=>this._handleServerResponse(e))}addCard({name:e,link:t}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{...this._headers},body:JSON.stringify({name:e,link:t})}).then(e=>this._handleServerResponse(e))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{...this._headers}}).then(e=>this._handleServerResponse(e))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{...this._headers}}).then(e=>this._handleServerResponse(e))}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{...this._headers}}).then(e=>this._handleServerResponse(e))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"8cf30273-2dc5-46c8-8e03-23447995aee4","Content-Type":"application/json"}});a.getInitialCards().then(e=>{console.log("Cards received:",e),e.forEach(function(e){const t=j(e);d.append(t)})}),a.getUserInfo().then(e=>{console.log("User info received:",e),f.textContent=e.about,S.textContent=e.name,q.src=e.avatar}).catch(e=>{console.error("Failed to get user info:",e)});const l=document.querySelector("#card-modal"),s=l.querySelector(".modal__close-button_alt"),c=l.querySelector(".modal__card-image"),i=l.querySelector(".modal__card-caption"),d=document.querySelector(".cards__list"),u=document.querySelector("#card-template"),m=document.querySelector("#edit-profile-modal"),_=document.querySelector("#new-post-modal"),h=document.querySelector("#deletion-modal"),v=document.querySelector("#update-avatar-modal"),S=document.querySelector(".profile__title"),f=document.querySelector(".profile__description"),y=document.querySelector("#name-input"),p=document.querySelector("#description-input"),b=m.querySelector(".modal__submit-button"),q=document.querySelector(".profile__avatar"),C=document.querySelector("#caption-input"),g=document.querySelector("#image-link-input"),k=_.querySelector(".modal__submit-button"),L=document.querySelector("#editProfileBtn"),E=document.querySelector("#newPostBtn"),U=m.querySelector(".modal__close-button"),x=_.querySelector(".modal__close-button"),$=h.querySelector(".modal__del-button"),A=h.querySelector(".modal__cancel-button"),w=h.querySelector(".modal__close-button"),B=document.querySelector(".profile__avatar-btn"),R=v.querySelector(".modal__close-button"),D=v.querySelector(".modal__submit-button"),P=v.querySelector(".modal__form"),F=v.querySelector(".modal__input");function T(e){e.classList.add("modal_is-opened"),document.addEventListener("keydown",J)}function I(e){e.classList.remove("modal_is-opened"),document.removeEventListener("keydown",J)}let N,O;function j(e){const t=u.content.querySelector(".card").cloneNode(!0),o=t.querySelector(".card__caption"),r=t.querySelector(".card__image"),n=t.querySelector(".card__like-button"),s=t.querySelector(".card__delete-button");return e.isLiked&&n.classList.add("card__like-button_active"),n.addEventListener("click",function(){n.classList.contains("card__like-button_active")?a.unlikeCard(e._id).then(e=>{console.log("Unliked:",e),n.classList.toggle("card__like-button_active")}).catch(e=>{console.error("Failed to unlike",e)}):a.likeCard(e._id).then(e=>{console.log("Liked:",e),n.classList.toggle("card__like-button_active")}).catch(e=>{console.error("Failed to like",e)})}),s.addEventListener("click",function(){N=t,O=e._id,T(h)}),r.addEventListener("click",function(){c.src=e.link,c.alt=e.name,i.textContent=e.name,T(l)}),r.src=e.link,r.alt=e.name,o.textContent=e.name,t}B.addEventListener("click",function(){T(v)}),R.addEventListener("click",function(){I(v)}),v.addEventListener("submit",function(t){t.preventDefault(),D.textContent="Saving...",console.log(F.value),a.updateUserAvatar({avatar:F.value}).then(e=>{const t=F.value;return q.src=e.avatar,t}).catch(e=>{console.error("Failed to update avatar:",e)}).finally(()=>{I(v),P.reset(),n(P,e),D.textContent="Save"})}),L.addEventListener("click",function(){T(m);const t=m.querySelector(e.formSelector);n(t,e),y.value=S.textContent,p.value=f.textContent}),U.addEventListener("click",function(){I(m),console.log("modalProfileCloseBtn was clicked")}),s.addEventListener("click",function(){I(l),console.log("previewCardCloseBtn was clicked")}),m.addEventListener("submit",function(e){e.preventDefault(),b.textContent="Saving...";const t=y.value,o=p.value;a.updateUserInfo({name:t,about:o}).then(e=>{S.textContent=e.name,f.textContent=e.about,console.log("User info updated:",e)}).catch(e=>{console.error("Failed to update user info:",e)}).finally(()=>{I(m),b.textContent="Save"})}),_.addEventListener("submit",function(t){t.preventDefault(),k.textContent="Saving...",console.log(C.value),console.log(g.value);const r={name:C.value,link:g.value};a.addCard(r).then(r=>{console.log("New card added:",r);const a=j(r);d.prepend(a);const l=t.target,s=l.querySelector(e.submitButtonSelector),c=Array.from(l.querySelectorAll(e.inputSelector));l.reset(),o(c,s,e),n(l,e)}).catch(e=>{console.error("Failed to upload new card:",e)}).finally(()=>{k.textContent="Save",I(_)})}),w.addEventListener("click",function(){I(h)}),A.addEventListener("click",function(){I(h)}),$.addEventListener("click",function(e){e.preventDefault(),$.textContent="Deleting...",a.deleteCard(O).then(()=>{N.remove()}).catch(e=>{console.error("Failed to delete card:",e)}).finally(()=>{I(h),$.textContent="Delete",console.log("Card deleted:",O)})}),E.addEventListener("click",function(){T(_);const t=_.querySelector(e.formSelector);n(t,e)}),x.addEventListener("click",function(){I(_)});const J=e=>{if("Escape"===e.key){const e=document.querySelector(".modal_is-opened");e&&I(e)}},H=e=>{e.target.classList.contains("modal_is-opened")&&I(e.target)};document.querySelectorAll(".modal").forEach(e=>{e.addEventListener("mousedown",H)}),r(e)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,